{"version":3,"sources":["Auth/Login.js","Auth/Register.js","Auth/Auth.js","components/navbar/Navbar.js","components/feed/sharedTrack/UnshareTrack.js","components/feed/comments/CommentForm.js","components/feed/comments/DeleteComment.js","components/feed/Feed.js","components/tracks/ShareTrack.js","components/tracks/Track.js","components/tracks/PageIndicator.js","components/tracks/PageIndicators.js","components/tracks/Tracks.js","components/profile/ProfileOverview.js","components/profile/EditProfile.js","components/profile/ProfileInfo.js","components/profile/Profile.js","components/admin/CreateTrack.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["LOGIN_MUTATION","gql","_templateObject","Login","_useState","useState","_useState2","Object","slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","tokenAuth","client","res","wrap","_context","prev","next","preventDefault","sent","localStorage","setItem","data","token","writeData","isLoggedIn","stop","_x","_x2","_x3","apply","this","arguments","react_default","createElement","react_apollo_esm","mutation","variables","_ref2","loading","error","called","console","log","onSubmit","id","value","onChange","target","type","placeholder","REGISTER_MUTATION","Register_templateObject","Register","setLogin","_useState5","_useState6","email","setEmail","onCompleted","createUser","_ref3","Auth","showLogin","className","src","Logo","alt","react","Auth_Login","onClick","Auth_Register","Navbar","currentUser","Link","to","profilePic","concat","removeItem","handleSignout","UnshareTrack_templateObject","CommentForm_templateObject","DeleteComment_templateObject","SHARED_QUERY","Feed_templateObject","SHARE_TRACK_MUTATION","ShareTrack_templateObject","ShareTrack","trackId","refetchQueries","query","shareTrack","Track","track","albumCoverSrc","title","genre","albumTitle","artistTitle","tracks_ShareTrack","PageIndicator","selectedGenre","setGenre","style","background","color","PageIndicators","genres","map","tracks_PageIndicator","key","TRACKS_QUERY","Tracks_templateObject","Tracks","tracks","filteredTracks","filter","tracks_Track","tracks_PageIndicators","ProfileOverview","profile","format","dateJoined","EDIT_PROFILE_MUTATION","EditProfile_templateObject","EditProfile","toggleEditProfile","setProfilePic","previewProfilePic","setPreviewProfilePic","favSong","setFavSong","_useState7","favArtist","_useState8","setFavArtist","_useState9","favGenre","_useState10","setFavGenre","_useState11","description","_useState12","setDescription","handleImgChange","selectedFile","files","size","URL","createObjectURL","handleImgUpload","FormData","append","axios","post","abrupt","url","t0","_callee2","editProfile","profilePicUrl","_context2","userId","handleEditProfileToggle","_ref4","react_loading_default","accept","cols","rows","ProfileInfo","profileId","currentUserId","editProfileOn","profile_EditProfile","USER_QUERY","Profile_templateObject","withRouter","match","params","profile_ProfileOverview","user","profile_ProfileInfo","CREATE_TRACK_MUTATION","CreateTrack_templateObject","CreateTrack","objectDestructuringEmpty","setTitle","setAlbumTitle","setartistTitle","audioSrc","setAudioSrc","_useState13","_useState14","setAlbumCoverSrc","_useState15","_useState16","trackTimeMins","setTrackTimeMins","_useState17","_useState18","trackTimeSecs","setTrackTimeSecs","_useState19","_useState20","trackNumber","setTrackNumber","handleAudioChange","handleImageChange","handleAudioUpload","handleImageUpload","_callee3","createTrack","uploadedUrlAudio","uploadedUrlAlbumCover","_context3","_ref5","name","UserContext","React","createContext","App","ME_QUERY","fetchPolicy","me","BrowserRouter","Provider","navbar_Navbar","Route","exact","path","component","render","profile_Profile","Component","App_templateObject","Boolean","window","location","hostname","ApolloClient","uri","fetchOptions","credentials","request","operation","getItem","setContext","headers","Authorization","clientState","defaults","IS_LOGGED_IN_QUERY","src_templateObject","ReactDOM","src_App","src_Auth_Auth","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.385425af.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Mutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\n\r\nconst Login = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleSubmit = async (e, tokenAuth, client) => {\r\n      e.preventDefault();\r\n      const res = await tokenAuth();\r\n      localStorage.setItem('reactAudioAuth', res.data.tokenAuth.token);\r\n      client.writeData({ data: { isLoggedIn: true }});\r\n  } \r\n  return (\r\n    <Mutation mutation={LOGIN_MUTATION} variables={{username, password}}>\r\n        {(tokenAuth, {loading, error, called, client}) => {\r\n            if (error) console.log(error)\r\n            \r\n            return (\r\n                <form onSubmit={e => handleSubmit(e, tokenAuth, client)}>\r\n                    <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} type=\"text\" placeholder=\"username\"/>\r\n                    <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} placeholder=\"password\"/>\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            )\r\n        }}\r\n    </Mutation>\r\n  )\r\n}\r\n\r\n\r\nconst LOGIN_MUTATION = gql`\r\n    mutation ($username: String!, $password: String!) {\r\n        tokenAuth(username: $username, password: $password) {\r\n            token\r\n        }\r\n    }\r\n`\r\nexport default Login; ","import React,{ useState } from 'react';\r\nimport { Mutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\n\r\n\r\nconst Register = ({ setLogin }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  return (\r\n    <Mutation mutation={REGISTER_MUTATION} variables={{username, password, email}} onCompleted={() => setLogin(true)}>\r\n        {(createUser, { data, error }) => {\r\n            if (error) console.log(error)\r\n\r\n            const handleSubmit = async(e, createUser) => {\r\n                e.preventDefault();\r\n\r\n                const res = await createUser();\r\n                console.log(res.data)\r\n            }\r\n            return (\r\n                <form onSubmit={e => handleSubmit(e, createUser)}>\r\n                    <input id=\"username\" value={username} onChange={e => setUsername(e.target.value)} type=\"text\" placeholder=\"username\"/>\r\n                    <input id=\"email\" value={email} onChange={e => setEmail(e.target.value)} type=\"email\" placeholder=\"email\"/>\r\n                    <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} placeholder=\"password\"/>\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            ) \r\n        }}\r\n    </Mutation>\r\n  )\r\n}\r\n\r\nconst REGISTER_MUTATION = gql`\r\n    mutation($username: String!, $password: String!, $email: String!) {\r\n        createUser(username: $username, password: $password, email: $email) {\r\n            user {\r\n                username\r\n                email\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport default Register;","import React, { useState, Fragment } from 'react'\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport Logo from '../logo.png';\r\nconst Auth = () => {\r\n  const [showLogin, setLogin] = useState(true);\r\n  return (\r\n    <div className=\"auth\">\r\n        <img src={Logo} alt=\"logo\" />\r\n        {showLogin ? (\r\n          <Fragment>\r\n            <h3>Login</h3>\r\n            <Login />\r\n            <button onClick={() => setLogin(false)}>New User? Click Here!</button>\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <h3>Register</h3>\r\n            <Register setLogin={setLogin}/>\r\n            <button onClick={() => setLogin(true)}>Previous User? Click Here!</button>\r\n          </Fragment>\r\n        )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Auth;","import React from 'react';\r\nimport { ApolloConsumer } from 'react-apollo';\r\nimport { Link } from 'react-router-dom';\r\nimport Logo from '../../logo.png'\r\n \r\nconst Navbar = ({ currentUser }) => {\r\n    const handleSignout = client => {\r\n        localStorage.removeItem('reactAudioAuth');\r\n        client.writeData({ data: { isLoggedIn: false }})\r\n    }\r\n\r\n    return (\r\n    <nav className=\"navbar\">\r\n        <div className=\"left-part\">\r\n            <Link to=\"/\">\r\n              <img src={Logo} alt=\"logo\"/>\r\n            </Link>\r\n            <Link to=\"/tracks\">Tracks</Link>\r\n        </div>\r\n        <div className=\"right-part\">\r\n            <img className=\"profile-pic\" src={currentUser.profilePic} alt=\"avatar\" />\r\n            <Link to={`/profile/${currentUser.id}`}>\r\n              <span className=\"username\">{currentUser.username}</span>\r\n            </Link>\r\n            <ApolloConsumer>\r\n              {client => (\r\n                <button onClick={() => handleSignout(client)}>Signout</button>\r\n              )}\r\n            </ApolloConsumer>\r\n        </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { Mutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\n\r\nimport { SHARED_QUERY } from '../Feed';\r\n\r\nconst UnshareTrack = ({ sharedTrackId }) => {\r\n    return (\r\n        <Mutation mutation={UNSHARE_TRACK_MUTATION} variables={{sharedTrackId}} onCompleted={() => console.log('Unshared the track...')} refetchQueries={() => [{ query: SHARED_QUERY }]}>\r\n        {(unshareTrack, { loading, error}) => {\r\n            if(loading) console.log('Unsharing the track...')\r\n            if(error) console.log(error)\r\n            return(\r\n                <button className=\"unshare\" onClick={() => unshareTrack(sharedTrackId)}>Unshare</button>\r\n            )   \r\n        }}\r\n\r\n        </Mutation>\r\n    )\r\n}\r\n\r\nconst UNSHARE_TRACK_MUTATION = gql`\r\n    mutation ($sharedTrackId: Int!) {\r\n        unshareTrack(sharedTrackId: $sharedTrackId) {\r\n            sharedTrackId\r\n        }\r\n    }\r\n`\r\n\r\nexport default UnshareTrack;","import React, { useState } from 'react';\r\nimport { Mutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\nimport ReactLoading from 'react-loading';\r\n\r\nimport { SHARED_QUERY } from '../Feed';\r\n\r\nconst CommentForm = ({ trackId }) => {\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const commentSubmit = (e, commentTrack) => {\r\n      e.preventDefault();\r\n      commentTrack({variables: {trackId, commentText}});\r\n      setCommentText(\"\");\r\n  }\r\n\r\n  /*\r\n\r\n  CONTINUE LATER \r\n  const handleUpdateCache = (cache, { data: commentTrack }) => {\r\n    const data = cache.readQuery({ query: SHARED_QUERY });\r\n  }\r\n\r\n  */\r\n  return (\r\n    <Mutation mutation={COMMENT_TRACK_MUTATION} onCompleted={() => console.log('Mutation Complete')} refetchQueries={() => [{ query: SHARED_QUERY }]}>\r\n        {(commentTrack, {loading, error}) => {\r\n            if(loading) return <ReactLoading type=\"bars\" color=\"#006989\" className=\"loading\" />;\r\n            if(error) console.log(error);\r\n            return (\r\n                <div className=\"comment-form\">\r\n                    <i className=\"comments-icon far fa-comments\" />\r\n                    \r\n                    <form onSubmit={e => commentSubmit(e, commentTrack)}>\r\n                        <input type=\"text\" id=\"commentText\" value={commentText} onChange={e => setCommentText(e.target.value)}/>\r\n                        <button type=\"submit\">submit</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }}\r\n    </Mutation>\r\n  )\r\n}\r\n\r\nconst COMMENT_TRACK_MUTATION = gql`\r\n    mutation ($trackId: Int!, $commentText: String!) {\r\n        commentTrack(trackId: $trackId, commentText: $commentText) {\r\n            comment {\r\n                user {id, username}\r\n                track {id, title}\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n\r\n\r\nexport default CommentForm;","import React from 'react';\r\nimport { Mutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\n\r\nimport { SHARED_QUERY } from '../Feed';\r\n\r\nconst DeleteComment = ({ commentId }) => (\r\n    <Mutation mutation={DELETE_COMMENT_MUTATION} variables={{commentId}} onCompleted={() => console.log('Comment  Deleted')} refetchQueries={() => [{ query: SHARED_QUERY }]}>\r\n        {(deleteComment, {loading, error}) => {\r\n            if(loading) console.log('Deleting the comment...');\r\n            if(error) console.log(error)\r\n\r\n            return (\r\n                <div className=\"delete-comment\" onClick={() => deleteComment(commentId)}>\r\n                    <i className=\"far fa-trash-alt\"></i>\r\n                    <span>Delete</span>\r\n                </div>\r\n            )\r\n        }}\r\n    </Mutation> \r\n)\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n    mutation ($commentId: Int!) {\r\n        deleteComment(commentId: $commentId) {\r\n            commentId\r\n        }\r\n    }\r\n`\r\n\r\nexport default DeleteComment;","import React from 'react'\r\nimport { Query } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\n\r\nimport SharedTrack from './sharedTrack/SharedTrack';\r\n\r\n\r\nconst Feed = () => {\r\n  return (\r\n    <Query query={SHARED_QUERY}>\r\n      {({ data, loading, error}) => {\r\n        if (loading) return <h3>Loading</h3>\r\n        if(error) console.log(error)\r\n        //console.log(data.shared)\r\n        const sharedTracks = data.shared;\r\n        return (\r\n          <div className=\"feed\">\r\n            {sharedTracks.map(track => (\r\n              <SharedTrack track={track} key={track.track.id} />\r\n            ))}\r\n          </div>\r\n        )\r\n      }}\r\n    </Query>\r\n  )\r\n}\r\n\r\nexport const SHARED_QUERY = gql`\r\n  {\r\n    shared {\r\n      id\r\n      track {\r\n        id\r\n        title\r\n        description\r\n        audioSrc\r\n        albumCoverSrc\r\n        albumTitle\r\n        artistTitle\r\n        genre\r\n        trackTimeMins\r\n        trackTimeSecs\r\n        trackNumber\r\n        likes {\r\n          id\r\n        }\r\n        comments {\r\n          id\r\n          user {id, username, profilePic}\r\n          track {title}\r\n          commentText\r\n        }\r\n      }\r\n      user {\r\n        username\r\n        profilePic\r\n        id\r\n      }\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nexport default Feed;","import React from 'react';\r\nimport { Mutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\n\r\nimport { SHARED_QUERY } from '../feed/Feed';\r\n\r\nconst ShareTrack = ({trackId}) => {\r\n  return (\r\n    <Mutation mutation={SHARE_TRACK_MUTATION} variables={{trackId: trackId}} onCompleted={() => console.log('Track shared')} refetchQueries={() => [{ query: SHARED_QUERY }]}>\r\n        {(shareTrack, {loading, error}) => {\r\n            if (loading) console.log('Loading the track')\r\n            if (error) console.log(error)\r\n\r\n            return (\r\n                <button onClick={shareTrack}>Share</button>\r\n            )\r\n        }}\r\n    </Mutation>\r\n  )\r\n}\r\n\r\nconst SHARE_TRACK_MUTATION = gql`\r\n    mutation ($trackId: Int!) {\r\n        shareTrack(trackId: $trackId) {\r\n            user {\r\n                username\r\n            }\r\n            track {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default ShareTrack; ","import React from 'react';\r\nimport ShareTrack from './ShareTrack';\r\n\r\nconst Track = ({ track }) => {\r\n  return (\r\n    <div className=\"track\">\r\n        <img src={track.albumCoverSrc} alt=\"album-cover\"/>\r\n        <div className=\"track-info\">\r\n            <h3>\r\n                {track.title}\r\n            </h3>\r\n\r\n            <p className=\"genre\">{track.genre}</p>\r\n            <p>    \r\n                {track.albumTitle}\r\n                <span className=\"separator\">-</span>\r\n                {track.artistTitle}\r\n            </p>\r\n            <ShareTrack trackId={track.id} />\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Track;","import React from 'react';\r\n\r\nconst PageIndicator = ({ genre, selectedGenre, setGenre }) => (\r\n    <div className=\"page-indicator\" onClick={() => setGenre(genre)} style={genre === selectedGenre ? {background: '#006989'} : null}>\r\n        <span style={genre === selectedGenre ? {color: '#EAEBED'} : null}>{genre}</span>\r\n    </div>\r\n)\r\n\r\nexport default PageIndicator;","import React from 'react';\r\nimport PageIndicator from './PageIndicator';\r\n\r\nconst PageIndicators = ({ genres, selectedGenre, setGenre }) => (\r\n    <div className=\"page-indicators selected\">\r\n        {genres.map(genre => (\r\n            <PageIndicator key={genre} genre={genre} selectedGenre={selectedGenre} setGenre={setGenre} />\r\n        ))}\r\n    </div>\r\n)\r\n\r\nexport default PageIndicators;","import React, { useState } from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\nimport Track from './Track';\r\nimport PageIndicators from './PageIndicators';\r\n\r\n\r\nconst Tracks = () => {\r\n  const [selectedGenre, setGenre] = useState(\"All\");\r\n  return (\r\n    <Query query={TRACKS_QUERY}> \r\n      {({data, loading, error}) => {\r\n        if (loading) return <h3>Loading</h3>\r\n        if (error) console.log(error);\r\n        console.log(data.tracks);\r\n        const tracks = data.tracks\r\n        const genres = ['All', 'Pop', 'EDM', 'Video Game'];\r\n        // let filteredTracks;\r\n        // tracks.filter()\r\n        let filteredTracks;\r\n        if(selectedGenre !== 'All') {\r\n          filteredTracks = tracks.filter(track => track.genre === selectedGenre)\r\n        } else {\r\n          filteredTracks = tracks\r\n        }\r\n        return (\r\n          <div className=\"tracks\">\r\n            {filteredTracks.map(track => <Track key={track.id} track={track} />)}\r\n            <PageIndicators genres={genres} selectedGenre={selectedGenre} setGenre={setGenre} />\r\n          </div>\r\n        )\r\n      }}\r\n    </Query>\r\n  )\r\n}\r\n\r\nconst TRACKS_QUERY = gql`\r\n  {\r\n    tracks {\r\n      id \r\n      title\r\n      albumTitle\r\n      artistTitle\r\n      albumCoverSrc\r\n      genre\r\n      trackTimeMins\r\n      trackTimeSecs\r\n    }\r\n  }\r\n`\r\n\r\n\r\nexport default Tracks;","import React from 'react';\r\nimport format from 'date-fns/format';\r\n\r\nconst ProfileOverview = ({ profile }) => (\r\n    <div className=\"profile-column prof-basic-info\">\r\n        <img src={profile.profilePic} alt=\"avatar\"/>\r\n        <h3>{profile.username}</h3>\r\n        <span>Joined: </span>\r\n        {format(profile.dateJoined, 'Do MMM YYYY')}\r\n    </div>    \r\n)\r\n\r\nexport default ProfileOverview;","import React, { useState } from 'react';\r\nimport { Mutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\nimport axios from 'axios';\r\nimport ReactLoading from 'react-loading';\r\n\r\nconst EditProfile = ({ toggleEditProfile, profile }) => {\r\n    const [profilePic, setProfilePic] = useState(profile.profilePic);\r\n    const [previewProfilePic, setPreviewProfilePic] = useState(profile.profilePic);\r\n    const [favSong, setFavSong] = useState(profile.favSong);\r\n    const [favArtist, setFavArtist] = useState(profile.favArtist);\r\n    const [favGenre, setFavGenre] = useState(profile.favGenre);\r\n    const [description, setDescription] = useState(profile.description);\r\n\r\n    const handleEditProfileToggle = (e) => {\r\n            if (e.target.className === \"edit-profile-modal-background\") {\r\n                toggleEditProfile(false)\r\n            } else if (e.target.className === \"cancel-btn\") {\r\n                toggleEditProfile(false)\r\n            } else {\r\n                toggleEditProfile(true)\r\n            }\r\n    }\r\n\r\n    const handleImgChange = e => {\r\n      const selectedFile = e.target.files[0];\r\n      const fileSizeLimit = 10000000;\r\n\r\n      if(selectedFile && selectedFile.size > fileSizeLimit) {\r\n        console.log('File too large')\r\n      } else {\r\n        setProfilePic(selectedFile);\r\n        setPreviewProfilePic(URL.createObjectURL(e.target.files[0]))\r\n      }\r\n    }\r\n\r\n    const handleImgUpload = async () => {\r\n      try {\r\n        const data = new FormData()\r\n        data.append('file', profilePic);\r\n          data.append('resource_type', 'raw')\r\n          data.append('upload_preset', 'react-tracks')\r\n          data.append('cloud_name', 'jhm-cloudi')\r\n          const res = await axios.post('https://api.cloudinary.com/v1_1/jhm-cloudi/raw/upload', data);\r\n          return res.data.url;\r\n      } catch(err) {\r\n        console.log(err)\r\n      }\r\n    }\r\n\r\n    const handleSubmit = async (e, editProfile) => {\r\n      e.preventDefault();\r\n      const profilePicUrl = await handleImgUpload();\r\n\r\n       /*\r\n    profilePic \r\n    favSong\r\n    favArtist\r\n    favGenre\r\n    description\r\n    */\r\n      editProfile({ variables: { userId: profile.id, profilePic: profilePicUrl, favSong, favArtist, favGenre, description}})\r\n    }\r\n\r\n  return (\r\n    <div className=\"edit-profile-modal-background\" onClick={e => handleEditProfileToggle(e)}>\r\n      <div className=\"edit-profile-modal\">\r\n        <Mutation mutation={EDIT_PROFILE_MUTATION} onCompleted={() => toggleEditProfile(false)}>\r\n          {(editProfile, { loading, error }) => {\r\n            if (loading) return <ReactLoading type=\"bars\" color=\"#006989\" className=\"loading\" />\r\n            if (error) console.log(error);\r\n\r\n            return (\r\n              <form className=\"edit-profile-form\" onSubmit={e => handleSubmit(e, editProfile)}>\r\n                {previewProfilePic !== null ? <img src={previewProfilePic} alt=\"avatar\" /> : <div className=\"profile-pic-placeholder\" />}\r\n                <input type=\"file\" id=\"profilePic\" onChange={handleImgChange} accept=\"image/*\" />\r\n                <input type=\"text\" id=\"favSong\" value={favSong} onChange={e => setFavSong(e.target.value)} placeholder=\"Favorite Song\" />\r\n                <input type=\"text\" id=\"favArtist\" value={favArtist} onChange={e => setFavArtist(e.target.value)} placeholder=\"Favorite Artist\" />\r\n                <input type=\"text\" id=\"favGenre\" value={favGenre} onChange={e => setFavGenre(e.target.value)} placeholder=\"Favorite Genre\" />\r\n                <textarea id=\"description\" value={description} onChange={e => setDescription(e.target.value)} cols=\"30\" rows=\"5\" placeholder=\"Description\"></textarea>\r\n\r\n                <div className=\"buttons\">\r\n                    <button type=\"submit\">Save</button>\r\n                    <button className=\"cancel-btn\">Cancel</button>\r\n                </div>\r\n              </form>\r\n            )\r\n          }}\r\n        </Mutation>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EDIT_PROFILE_MUTATION = gql`\r\n  mutation($userId: Int!, $profilePic: String, $favSong: String, $favArtist: String, $favGenre: String, $description: String ) {\r\n    editProfile(userId: $userId, profilePic: $profilePic, favSong: $favSong, favArtist: $favArtist, favGenre: $favGenre, description: $description) {\r\n      user {\r\n        id\r\n        profilePic\r\n        favSong\r\n        favArtist\r\n        favGenre\r\n        description\r\n      }      \r\n    }\r\n  }\r\n`\r\n\r\nexport default EditProfile; ","import React, { useState } from 'react';\r\nimport EditProfile from './EditProfile';\r\n\r\nconst ProfileInfo = ({ profile, profileId, currentUserId }) => {\r\n    const [editProfileOn, toggleEditProfile] = useState(false);\r\n    return (\r\n        <div className=\"profile-column\">\r\n            <span className=\"profile-title\" >Favorite Song: </span >\r\n            <p>{profile.favSong}</p>\r\n            <span className=\"profile-title\" >Favorite Artist: </span >\r\n            <p>{profile.favArtist}</p>\r\n            <span className=\"profile-title\" >Favorite Genre:</span >\r\n            <p>{profile.favGenre}</p>\r\n            <span className=\"profile-title description\" >Description: </span >\r\n            <p>{profile.description}</p>\r\n            {currentUserId === profileId ? <button onClick={() => toggleEditProfile(true)}>Edit Profile</button> : null}\r\n            {editProfileOn && <EditProfile toggleEditProfile={toggleEditProfile} profile={profile} />}\r\n        </div>    \r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Query } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\n\r\nimport ProfileOverview from './ProfileOverview';\r\nimport ProfileInfo from './ProfileInfo';\r\n\r\nconst Profile = ({ match, currentUser }) => {\r\n    const id = match.params.id;\r\n    return (\r\n        <Query query={USER_QUERY} variables={{id}}>\r\n            {({data, loading, error}) => {\r\n\r\n                if(loading) return <h3>Loading</h3>\r\n                if(error) console.log(error);\r\n\r\n                return (\r\n                    <div className=\"profile\">\r\n                        <div className=\"profile-wrapper\">\r\n                            <ProfileOverview profile={data.user} />\r\n                            <ProfileInfo currentUserId={currentUser.id} profileId={id} profile={data.user} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }}\r\n        </Query>\r\n    )\r\n}\r\n\r\nconst USER_QUERY = gql`\r\n    query ($id: Int!) {\r\n        user (id: $id) {\r\n            id\r\n            username\r\n            dateJoined\r\n            profilePic\r\n            favSong\r\n            favArtist\r\n            favGenre\r\n            description\r\n        }\r\n    }\r\n`\r\n\r\nexport default withRouter(Profile);","import React, { useState } from 'react';\r\nimport { Mutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost'\r\nimport axios from 'axios';\r\n\r\nconst CreateTrack = ({}) => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [albumTitle, setAlbumTitle] = useState(\"\");\r\n    const [artistTitle, setartistTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\")\r\n    const [genre, setGenre] = useState(\"\")\r\n    const [audioSrc, setAudioSrc] = useState(\"\")\r\n    const [albumCoverSrc, setAlbumCoverSrc] = useState(\"\")\r\n    const [trackTimeMins, setTrackTimeMins] = useState(\"\")\r\n    const [trackTimeSecs, setTrackTimeSecs] = useState(\"\")\r\n    const [trackNumber, setTrackNumber] = useState(\"\");\r\n\r\n    const handleAudioChange = e => {\r\n        const selectedFile = e.target.files[0];\r\n        const fileSizeLimit = 10000000;\r\n        \r\n        if(selectedFile && selectedFile.size > fileSizeLimit) {\r\n            console.log(\"File size too large\")\r\n        } else {\r\n            setAudioSrc(selectedFile)\r\n        }\r\n    }\r\n\r\n    const handleImageChange = e => {\r\n        const selectedFile = e.target.files[0];\r\n        const fileSizeLimit = 10000000;\r\n        \r\n        if(selectedFile && selectedFile.size > fileSizeLimit) {\r\n            console.log(\"File size too large\")\r\n        } else {\r\n            setAlbumCoverSrc(selectedFile)\r\n        }\r\n    }\r\n\r\n    const handleAudioUpload = async () => {\r\n        try {\r\n          const data = new FormData()\r\n          data.append('file', audioSrc);\r\n          data.append('resource_type', 'raw')\r\n          data.append('upload_preset', 'react-tracks')\r\n          data.append('cloud_name', 'jhm-cloudi')\r\n          const res = await axios.post('https://api.cloudinary.com/v1_1/jhm-cloudi/raw/upload', data)\r\n          console.log(res, 'Audio file')\r\n          return res.data.url\r\n        } catch (err) {\r\n          console.error('Error uploading file', err)\r\n        }\r\n      }\r\n\r\n      const handleImageUpload = async () => {\r\n        try {\r\n          const data = new FormData()\r\n          data.append('file', albumCoverSrc);\r\n          data.append('resource_type', 'raw')\r\n          data.append('upload_preset', 'react-tracks')\r\n          data.append('cloud_name', 'jhm-cloudi')\r\n          const res = await axios.post('https://api.cloudinary.com/v1_1/jhm-cloudi/raw/upload', data)\r\n          console.log(res, 'Img file')\r\n          return res.data.url\r\n        } catch (err) {\r\n          console.error('Error uploading file', err)\r\n        }\r\n      }\r\n\r\n      const handleSubmit = async (e, createTrack) => {\r\n        e.preventDefault();\r\n       \r\n        // upload audio file and get returned url\r\n        const uploadedUrlAudio = await handleAudioUpload()\r\n        const uploadedUrlAlbumCover = await handleImageUpload()\r\n        createTrack({ variables: { title, albumTitle, genre, artistTitle, description, audioSrc: uploadedUrlAudio, albumCoverSrc: uploadedUrlAlbumCover, trackTimeMins, trackTimeSecs, trackNumber}})\r\n      }\r\n\r\n\r\n  return (\r\n    <Mutation mutation={CREATE_TRACK_MUTATION} onCompleted={() => console.log(\"Mutation complete\")}>\r\n        {(createTrack, { loading, error}) => {\r\n            if (loading) return <h3>Loading</h3>\r\n            if (error) console.log(error)\r\n            return (\r\n               <form className=\"upload\" onSubmit={e => handleSubmit(e, createTrack)}>\r\n                <input id=\"title\" type=\"text\" value={title} onChange={e => setTitle(e.target.value)} placeholder=\"title\" />\r\n                <input id=\"albumTitle\" type=\"text\" value={albumTitle} onChange={e => setAlbumTitle(e.target.value)} placeholder=\"albumTitle\" />\r\n                <input id=\"artistTitle\" type=\"text\" value={artistTitle} onChange={e => setartistTitle(e.target.value)} placeholder=\"artistTitle\" />\r\n                <textarea name=\"description\" id=\"description\" cols=\"30\" rows=\"10\" value={description} onChange={e => setDescription(e.target.value)} placeholder=\"description\"></textarea>\r\n                <input type=\"text\" id=\"genre\" value={genre} onChange={e => setGenre(e.target.value)} placeholder=\"genre\" />\r\n                <input type=\"file\" name=\"audioSrc\" id=\"audioSrc\"  onChange={handleAudioChange} placeholder=\"audioSrc\"/>\r\n                <input type=\"file\" name=\"albumCoverSrc\" id=\"albumCoverSrc\" onChange={handleImageChange} placeholder=\"albumCoverSrc\"/>\r\n                <input type=\"number\" name=\"trackTimeMins\" id=\"trackTimeMins\" value={trackTimeMins} onChange={e => setTrackTimeMins(e.target.value)} placeholder=\"trackTimeMins\"/>\r\n                <input type=\"number\" name=\"trackTimeSecs\" id=\"trackTimeSecs\" value={trackTimeSecs} onChange={e => setTrackTimeSecs(e.target.value)} placeholder=\"trackTimeSecs\" />\r\n                <input type=\"number\" name=\"trackNumber\" id=\"trackNumber\" value={trackNumber} onChange={e => setTrackNumber(e.target.value)} placeholder=\"trackNumber\" />\r\n                <button type=\"submit\">Submit</button>\r\n               </form>\r\n            )\r\n        }}\r\n    </Mutation>\r\n  )\r\n}\r\n\r\nconst CREATE_TRACK_MUTATION = gql`\r\nmutation ($title: String!, $albumTitle: String!, $genre: String!, $artistTitle: String!, $description: String!, $audioSrc: String!, $albumCoverSrc: String!, $trackTimeMins: Int, $trackTimeSecs: Int, $trackNumber: Int){\r\n    createTrack(\r\n      title: $title,\r\n      albumTitle: $albumTitle,\r\n      artistTitle: $artistTitle,\r\n      genre: $genre,\r\n      description: $description,\r\n      audioSrc: $audioSrc,\r\n      albumCoverSrc: $albumCoverSrc,\r\n      trackTimeMins: $trackTimeMins,\r\n      trackTimeSecs: $trackTimeSecs,\r\n      trackNumber: $trackNumber\r\n    ) {\r\n      track {id,title, albumTitle, description, audioSrc, albumCoverSrc, trackTimeMins, trackTimeSecs}\r\n    }\r\n  }\r\n`\r\n\r\nexport default CreateTrack;","import React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport ReactLoading from 'react-loading';\nimport Navbar from './components/navbar/Navbar';\nimport Tracks from './components/tracks/Tracks';\nimport Feed from './components/feed/Feed';\nimport Profile from './components/profile/Profile';\nimport CreateTrack from './components/admin/CreateTrack';\n\nexport const UserContext = React.createContext();\n\nclass App extends Component {\n  render() {\n    return (\n      <Query query={ME_QUERY} fetchPolicy=\"cache-and-network\">\n        {({ data, loading, error}) => {\n          if (loading) return <ReactLoading type=\"bars\" color=\"#006989\" className=\"loading\" />\n          if (error) console.log(error)\n\n          const currentUser = data.me\n\n          return(\n            <Router>\n              <UserContext.Provider value={currentUser}> \n                <Navbar currentUser={currentUser}/>\n                <Route exact path=\"/\" component={CreateTrack} />\n                <Route exact path=\"/tracks\" component={Tracks} />\n                <Route exact path=\"/profile/:id\" render={() => <Profile currentUser={currentUser} />} />\n              </UserContext.Provider>\n            </Router>\n          )\n        }} \n      </Query>\n    );\n  }\n}\n\nexport const ME_QUERY = gql`\n  {\n    me {\n      id\n      username\n      email\n      profilePic\n\n      likeSet {\n        track {\n          id\n        }\n      }\n    }\n  }\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider, Query } from 'react-apollo';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport Auth from './Auth/Auth'\nimport './index.css';\nimport './app.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n    uri: 'https://raudio2-jhm.herokuapp.com/graphql/',\n    fetchOptions: {\n        credentials: \"include\"\n    },\n    request: operation => {\n        const token = localStorage.getItem('reactAudioAuth') || \"\";\n\n        operation.setContext({\n            headers: {\n                Authorization: `JWT ${token}`\n            }\n        })\n    },\n    clientState: {\n        defaults: {\n            isLoggedIn: !!localStorage.getItem('reactAudioAuth')\n        }\n    }\n});\n\nconst IS_LOGGED_IN_QUERY = gql`\n    query {\n        isLoggedIn @client\n    }\n`;\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <Query query={IS_LOGGED_IN_QUERY}>\n            {({data}) => data.isLoggedIn ? <App /> : <Auth />}\n        </Query>\n    </ApolloProvider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.97da0d85.png\";"],"sourceRoot":""}